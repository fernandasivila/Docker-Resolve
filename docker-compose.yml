services:

  mongo_db:
    image: mongo:latest
    container_name: mongo_db
    ports:
      - "27017:27017"
    volumes:
      - ./mongo_data/gym_db:/data/dump
      - ./mongo_data/mongo_script:/docker-entrypoint-initdb.d
      - ./mongo_key/replica.key:/data/replica.key.devel
      - ./mongo_backups:/backups 
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin1234
    #command: ["mongod", "--config", "/etc/mongod.conf"]
    restart: always
    networks: 
      - mongo-cluster
    depends_on:
      - mongo_db1
      - mongo_db2
    entrypoint:
      - bash
      - -c
      - |
          cp /data/replica.key.devel /data/replica.key
          chmod 400 /data/replica.key
          chown 999:999 /data/replica.key
          exec docker-entrypoint.sh $$@ 
    command: mongod --replSet mongoReplicaSet --bind_ip localhost,mongo_db --keyFile /data/replica.key

  mongo_db1:
    image: mongo:latest
    container_name: mongo_db1
    networks:
      - mongo-cluster
    volumes:
      - ./mongo_key/replica.key:/data/replica.key.devel
    entrypoint:
      - bash
      - -c
      - |
          cp /data/replica.key.devel /data/replica.key
          chmod 400 /data/replica.key 
          chown 999:999 /data/replica.key
          exec docker-entrypoint.sh $$@
    command: mongod --replSet mongoReplicaSet --bind_ip localhost,mongo_db1 --keyFile /data/replica.key

  mongo_db2:
    image: mongo:latest
    container_name: mongo_db2
    networks:
      - mongo-cluster
    volumes:
      - ./mongo_key/replica.key:/data/replica.key.devel
    entrypoint:
      - bash
      - -c
      - |
          cp /data/replica.key.devel /data/replica.key
          chmod 400 /data/replica.key 
          chown 999:999 /data/replica.key
          exec docker-entrypoint.sh $$@
    command: mongod --replSet mongoReplicaSet --bind_ip localhost,mongo_db2 --keyFile /data/replica.key

  mongo-client:
    image: mongo-express:latest
    container_name: mongo_client
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin1234
      ME_CONFIG_MONGODB_ENABLE_ADMIN: true
      ME_CONFIG_BASICAUTH_USERNAME: user
      ME_CONFIG_BASICAUTH_PASSWORD: admin1234
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin1234@mongo_db:27017/gym_db?authSource=admin
    restart: always
    networks: 
      - mongo-cluster

  mongo-backup:
    build:
      context: ./mongo_backups
      dockerfile: Dockerfile
    container_name: mongo_backup
    volumes:
      - ./mongo_backups/backups:/backups
    depends_on:
      - mongo_db
    networks:
      - mongo-cluster

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30 --label-enable
    restart: always
  
  frontend:
    image: maxmartinez29/docker-resolve-frontend:latest
    container_name: frontend
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    ports:
      - "4200:4200"
    depends_on:
      - mongo_db
    restart: always
    networks:
      - mongo-cluster

  backend:
    container_name: backend
    build:
      context: ./Backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - MONGO_URI=mongodb://admin:admin1234@mongo_db:27017/gym_db?authSource=admin
    depends_on:
      - mongo_db
    restart: always
    networks:
      - mongo-cluster

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus 
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    restart: always
    networks:
      - mongo-cluster

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
    - GF_SECURITY_ADMIN_USER=admin
    - GF_SECURITY_ADMIN_PASSWORD=admin1234
    depends_on:
      - prometheus
    networks:
      - mongo-cluster

  mongodb-exporter:
    container_name: mongodb_exporter
    build:
      context: ./mongodb_exporter
      dockerfile: Dockerfile
    environment:
      - MONGODB_URI=mongodb://admin:admin1234@mongo_db:27017/
    ports:
      - "9216:9216" 
    depends_on:
      - mongo_db
    entrypoint: ["dockerize", "-wait", "tcp://mongo_db:27017", "-timeout", "60s", "/opt/bitnami/mongodb-exporter/bin/mongodb_exporter"]
    networks:
      - mongo-cluster


networks:
  mongo-cluster:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.0.0/16

volumes:
 grafana_data: